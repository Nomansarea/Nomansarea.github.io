{"meta":{"title":"blog","subtitle":"","description":"","author":"tao","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"java object-oriented","slug":"java-object-oriented","date":"2022-12-15T13:37:20.000Z","updated":"2022-12-15T14:04:36.792Z","comments":true,"path":"2022/12/15/java-object-oriented/","link":"","permalink":"http://example.com/2022/12/15/java-object-oriented/","excerpt":"","text":"面向对象类与对象 12345678910111213public static void main(String[] args) &#123; String cat1Name = &quot;小白&quot;; String cat2Name = &quot;小花&quot;; int cat1Age = 3; int cat2Age = 100; String cat1Color =&quot;白色&quot;; String cat2 Color =&quot;花色&quot;; //单独变量解决不利于数据管理 String[] cat1 = &#123;&quot;小白&quot;.&quot;3&quot;,&quot;白色&quot;&#125; //数据类型无法体现 //只能通过[下标]获取信息，变量名和内容对应关系不明确 //不能体现猫的行为&#125; 对象[属性，行为] 猫类Cat：自定义数据类型 int：java提供数据类型 从类到对象：实例化一个对象，创建一个对象 12345678910class Cat&#123; String name; int age; String color;&#125;Cat cat1 = new Cat();//创建一只Cat并赋给cat1cat1.name =&quot;小白&quot;;cat1.age = 3；cat1.color =&quot;白色&quot;System.out.println(&quot;猫的信息&quot;+cat1.name+&quot; &quot;+cat1.age+&quot; &quot;+cat1.color) 对象在内存中的存在形式 Preoperties（成员变量）field(字段)属性可以为基本数据类型 应用类型（对象,数组) 定义：四种访问修饰符 任意类型 属性名; 不赋值，则有默认值(遵循数组规则) 12345//如何创建对象(1)Person p1 = new Person();//p1是对象名（对象引用）//new Person()创建的对象空间（数据）才是真正的对象//左边是人名，右边是具体的人 123456//如何创建对象(2)Cat cat;//声明对象cat(属于Cat类)cat = new Cat();//创建//如何访问属性cat.name//对象名.属性 类和对象的内存分配机制12345Person p = new Person();p.age = 10;p2 =p1 ;p.age = 80;System.out.println(p2.age);//80 先加载类信息（属性信息和方法信息） 在堆中分配空间，进行默认初始化 把地址赋给p,p就指向对象 进行指定初始化 成员方法（方法）1234567891011//方法基础public void speak()&#123; System.out.println(&quot;&quot;);&#125; //public表示方法是公开//void表示方法没有返回值//speak方法名//（）表示方法没有传入参数，即形参列表为空//&#123;&#125;表示方法体，可以写入执行代码//return可以没有p1.speak();//调用方法 12345678910111213public void cal01()&#123; int res = 0; for (int i = 1; i&lt;=1000；i++)&#123; res += i; &#125; public void cal02(int n)&#123;//(int n)形参列表,可以接受输入 for (int i = 1; i&lt;=n；i++)&#123; res += i; System.outprintln(&quot;cal02方法 计算结果=&quot; + res)&#125;p1.cal01()//注意括号不能省 p1.cal02(5)//方法调用机制参考函数 1234public int getSum(int num1,int num2)&#123; int res = num1 + num2; return res;&#125;","categories":[],"tags":[]},{"title":"My first blog","slug":"My-first-blog","date":"2022-12-14T13:44:13.000Z","updated":"2022-12-14T15:08:33.668Z","comments":true,"path":"2022/12/14/My-first-blog/","link":"","permalink":"http://example.com/2022/12/14/My-first-blog/","excerpt":"","text":"hexo折腾基础command12345hexo clean 删除hexo g 生成hexo s 启动hexo d 部署hexo new &quot;文章名&quot; 创建 主题1git clone 主题github网址 themes/主题名 然后修改config.yml","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-12-14T13:32:25.151Z","updated":"2022-12-14T13:32:25.151Z","comments":true,"path":"2022/12/14/hello-world/","link":"","permalink":"http://example.com/2022/12/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}